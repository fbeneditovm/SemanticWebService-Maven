package br.pucrio.inf.lac.hospital.semantic.database;

import br.pucrio.inf.lac.hospital.semantic.data.AcceptedBySpecialty;
import br.pucrio.inf.lac.hospital.semantic.data.Address;
import br.pucrio.inf.lac.hospital.semantic.data.Beacon;
import br.pucrio.inf.lac.hospital.semantic.data.Hospital;
import br.pucrio.inf.lac.hospital.semantic.data.Insurance;
import br.pucrio.inf.lac.hospital.semantic.data.PatientMHub;
import br.pucrio.inf.lac.hospital.semantic.data.Room;
import br.pucrio.inf.lac.hospital.semantic.data.Specialty;
import br.pucrio.inf.lac.hospital.semantic.data.Visit;
import java.util.Set;

public interface SemanticDao {
    /**
     * Insert Object
     * the only parameter is the object to be inserted
     * returns the id generated by the database or -1 in case of error
     */
    public long insertBeacon(Beacon b);
    public long insertHospital(Hospital h);
    public long insertRoom(Room r);
    public long insertAcceptedBySpecialty(AcceptedBySpecialty a);
    public long insertAddress(Address a);
    public long insertInsurance(Insurance i);
    public long insertPatientMHub(PatientMHub p);
    public long insertSpecialty(Specialty s);
    public long insertVisit(Visit v);
    
    /**
     * Delete Object
     * the only parameter is the id of the object to be deleted
     * returns true if the object has been deleted or false if it has not
     */
    public boolean deleteBeacon(long beaconID);
    public boolean deleteHospital(long hospitalID);
    public boolean deleteRoom(long roomID);
    public boolean deleteAcceptedBySpecialty(long acceptedBySpecialtyID);
    public boolean deleteAddress(long addressID);
    public boolean deleteInsurance(long insuranceID);
    public boolean deletePatientMHub(long patientMHubID);
    public boolean deleteSpecialty(long specialtyID);
    public boolean deleteVisit(long visitID);
    
    /**
     * Update Object
     * the only parameter is the object to be updated
     * the object's id must be the one to be updated on the database
     * returns true if the object has been updated or false if it has not
     */
    public boolean updateBeacon(Beacon b);
    public boolean updateHospital(Hospital h);
    public boolean updateRoom(Room r);
    public boolean updateAcceptedBySpecialty(AcceptedBySpecialty a);
    public boolean updateAddress(Address a);
    public boolean updateInsurance(Insurance i);
    public boolean updatePatientMHub(PatientMHub p);
    public boolean updateSpecialty(Specialty s);
    public boolean updateVisit(Visit v);
    
    /**
     * Get Objects
     * no parameters
     * returns a Set all the objects of one type stored at the database
     */
    public Set<Beacon> getBeacons();
    public Set<Hospital> getHospitals();
    public Set<Room> getRooms();
    public Set<AcceptedBySpecialty> getAcceptedBySpecialties();
    public Set<Address> getAddresses();
    public Set<Insurance> getInsurances();
    public Set<PatientMHub> getPatientMHubs();
    public Set<Specialty> getSpecialties();
    public Set<Visit> getVisits();
    
    /**
     * Specific Gets
     * Gets a Specific Set of Objects based on the parameters
     */
    /**
     * Gets a specific Hospital
     * @param hospitalID the id of the Hospital
     * @return the Hospital
     */
    public Hospital getHospital(long hospitalID);
    
    /**
     * Gets all the beacons located at a specific room
     * @param roomID the id of the room
     * @return A Set of Beacons containing the Beacons located at the room
     */
    public Set<Beacon> getBeaconsByRoom(long roomID);
    
    /**
     * Gets all the beacons located at a specific Hospital
     * @param hospitalID the id of the Hospital
     * @return A Set of Beacons containing the Beacons located at the room
     */
    public Set<Beacon> getBeaconsByHospital(long hospitalID);
    
    /**
     * Gets all the Hospitals located in the Specified City
     * @param city the name of the city
     * @return a Set of Hospitals containing the Hospitals of the city
     */
    public Set<Hospital> getHospitalsByCity(String city);
    
    /**
     * Gets the Hospitals of a city that offers a given specialty
     * @param city
     * @param specialtyID
     * @return a Set of Hospitals containing the Hospitals of the city that have
     * the required Specialty
     */
    public Set<Hospital> getHospitalsByCityAndSpecialty(String city, long specialtyID);
    
    /**
     * Gets the Hospitals of a city that offers services to a given Insurance
     * @param city
     * @param insuranceID
     * @return a Set of Hospitals containing the Hospitals of the city that offers
     * services to the Insurance
     */
    public Set<Hospital> getHospitalsByCityAndInsurance(String city, long insuranceID);
    
    /**
     * Gets the Hospitals of a city that offers a given specialty for
     * patients with a given insurance
     * @param city
     * @param specialtyID
     * @param insuranceID
     * @return a Set of Hospitals containing the Hospitals of the city that offers
     * the required Specialty for the given Insurance
     */
    public Set<Hospital> getHospitalsByCityAndSpecialtyAndInsurance(String city, long specialtyID, long insuranceID);
    /**
     * Gets all the AcceptedBySpecialty related to a given Hospital
     * @param hospitalID the id of the Hospital
     * @return a Set of AcceptedBySpecialty related to the Hospital
     */
    public Set<AcceptedBySpecialty> getAcceptedBySpecialtyByHospital(long hospitalID);
    
    /**
     * Gets a specific Address
     * @param addressID the id of the Address
     * @return the Address
     */
    public Address getAddress(long addressID);
    
    /**
     * Gets a specific Insurance
     * @param insuranceID the id of the insurance
     * @return the Insurance
     */
    public Insurance getInsurance(long insuranceID);
    
    /**
     * Gets a specific Specialty
     * @param specialtyID the id of the Specialty
     * @return the Specialty
     */
    public Specialty getSpecialty(long specialtyID);
}



